{"ast":null,"code":"var _jsxFileName = \"/Users/samanthabadeau/Desktop/neurointerview/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/AuthContext.js\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { authService } from '../services/authService';\n\n// Create the context\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the auth context\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n// Provider component\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Initialize authentication state\n  useEffect(() => {\n    const initAuth = async () => {\n      try {\n        // Check if user is already logged in\n        const token = localStorage.getItem('token');\n        if (token) {\n          // Validate token and get user data\n          const userData = await authService.getCurrentUser();\n          setUser(userData);\n        }\n      } catch (err) {\n        console.error('Auth initialization error:', err);\n        // Clear invalid tokens\n        localStorage.removeItem('token');\n        localStorage.removeItem('refreshToken');\n      } finally {\n        setLoading(false);\n      }\n    };\n    initAuth();\n  }, []);\n\n  // Login function\n  const login = async credentials => {\n    setLoading(true);\n    setError(null);\n    try {\n      const {\n        token,\n        refresh_token,\n        user\n      } = await authService.login(credentials);\n\n      // Store tokens\n      localStorage.setItem('token', token);\n      localStorage.setItem('refreshToken', refresh_token);\n\n      // Set the user in state\n      setUser(user);\n      return user;\n    } catch (err) {\n      setError(err.message || 'Login failed');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Register function\n  const register = async userData => {\n    setLoading(true);\n    setError(null);\n    try {\n      const {\n        token,\n        refresh_token,\n        user\n      } = await authService.register(userData);\n\n      // Store tokens\n      localStorage.setItem('token', token);\n      localStorage.setItem('refreshToken', refresh_token);\n\n      // Set the user in state\n      setUser(user);\n      return user;\n    } catch (err) {\n      setError(err.message || 'Registration failed');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    // Clear tokens\n    localStorage.removeItem('token');\n    localStorage.removeItem('refreshToken');\n\n    // Clear user from state\n    setUser(null);\n  };\n\n  // Update user profile\n  const updateProfile = async profileData => {\n    setLoading(true);\n    setError(null);\n    try {\n      const updatedUser = await authService.updateProfile(profileData);\n      setUser(updatedUser);\n      return updatedUser;\n    } catch (err) {\n      setError(err.message || 'Profile update failed');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update user preferences\n  const updatePreferences = async preferences => {\n    setLoading(true);\n    setError(null);\n    try {\n      const updatedUser = await authService.updatePreferences(preferences);\n      setUser(updatedUser);\n      return updatedUser;\n    } catch (err) {\n      setError(err.message || 'Preferences update failed');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Context value\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    updateProfile,\n    updatePreferences\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n};\n\n// src/services/api.js\n_s2(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a response interceptor for token refresh\napi.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n\n  // If error is 401 and not a retry\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      // Get refresh token\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (!refreshToken) {\n        // If no refresh token, logout\n        localStorage.removeItem('token');\n        localStorage.removeItem('refreshToken');\n        return Promise.reject(error);\n      }\n\n      // Try to get a new token\n      const response = await axios.post('/api/token/refresh/', {\n        refresh: refreshToken\n      });\n\n      // Store new tokens\n      localStorage.setItem('token', response.data.access);\n\n      // Update auth header\n      originalRequest.headers['Authorization'] = `Bearer ${response.data.access}`;\n      api.defaults.headers.common['Authorization'] = `Bearer ${response.data.access}`;\n\n      // Retry the original request\n      return api(originalRequest);\n    } catch (refreshError) {\n      // If refresh fails, logout\n      localStorage.removeItem('token');\n      localStorage.removeItem('refreshToken');\n      return Promise.reject(refreshError);\n    }\n  }\n  return Promise.reject(error);\n});\nexport default api;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","authService","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","loading","setLoading","error","setError","initAuth","token","localStorage","getItem","userData","getCurrentUser","err","console","removeItem","login","credentials","refresh_token","setItem","message","register","logout","updateProfile","profileData","updatedUser","updatePreferences","preferences","value","_jsxDEV","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","axios","jsxDEV","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","response","use","_error$response","originalRequest","config","status","_retry","refreshToken","Promise","reject","post","refresh","data","access","defaults","common","refreshError","$RefreshReg$"],"sources":["/Users/samanthabadeau/Desktop/neurointerview/frontend/src/context/AuthContext.js"],"sourcesContent":["// src/context/AuthContext.js\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { authService } from '../services/authService';\n\n// Create the context\nconst AuthContext = createContext();\n\n// Custom hook to use the auth context\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n\n// Provider component\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Initialize authentication state\n  useEffect(() => {\n    const initAuth = async () => {\n      try {\n        // Check if user is already logged in\n        const token = localStorage.getItem('token');\n        if (token) {\n          // Validate token and get user data\n          const userData = await authService.getCurrentUser();\n          setUser(userData);\n        }\n      } catch (err) {\n        console.error('Auth initialization error:', err);\n        // Clear invalid tokens\n        localStorage.removeItem('token');\n        localStorage.removeItem('refreshToken');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    initAuth();\n  }, []);\n\n  // Login function\n  const login = async (credentials) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const { token, refresh_token, user } = await authService.login(credentials);\n\n      // Store tokens\n      localStorage.setItem('token', token);\n      localStorage.setItem('refreshToken', refresh_token);\n\n      // Set the user in state\n      setUser(user);\n      return user;\n    } catch (err) {\n      setError(err.message || 'Login failed');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Register function\n  const register = async (userData) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const { token, refresh_token, user } = await authService.register(userData);\n\n      // Store tokens\n      localStorage.setItem('token', token);\n      localStorage.setItem('refreshToken', refresh_token);\n\n      // Set the user in state\n      setUser(user);\n      return user;\n    } catch (err) {\n      setError(err.message || 'Registration failed');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    // Clear tokens\n    localStorage.removeItem('token');\n    localStorage.removeItem('refreshToken');\n\n    // Clear user from state\n    setUser(null);\n  };\n\n  // Update user profile\n  const updateProfile = async (profileData) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const updatedUser = await authService.updateProfile(profileData);\n      setUser(updatedUser);\n      return updatedUser;\n    } catch (err) {\n      setError(err.message || 'Profile update failed');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update user preferences\n  const updatePreferences = async (preferences) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const updatedUser = await authService.updatePreferences(preferences);\n      setUser(updatedUser);\n      return updatedUser;\n    } catch (err) {\n      setError(err.message || 'Preferences update failed');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Context value\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    updateProfile,\n    updatePreferences,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n\n// src/services/api.js\nimport axios from 'axios';\n\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add a response interceptor for token refresh\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n\n    // If error is 401 and not a retry\n    if (error.response?.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n\n      try {\n        // Get refresh token\n        const refreshToken = localStorage.getItem('refreshToken');\n\n        if (!refreshToken) {\n          // If no refresh token, logout\n          localStorage.removeItem('token');\n          localStorage.removeItem('refreshToken');\n          return Promise.reject(error);\n        }\n\n        // Try to get a new token\n        const response = await axios.post('/api/token/refresh/', {\n          refresh: refreshToken,\n        });\n\n        // Store new tokens\n        localStorage.setItem('token', response.data.access);\n\n        // Update auth header\n        originalRequest.headers['Authorization'] = `Bearer ${response.data.access}`;\n        api.defaults.headers.common['Authorization'] = `Bearer ${response.data.access}`;\n\n        // Retry the original request\n        return api(originalRequest);\n      } catch (refreshError) {\n        // If refresh fails, logout\n        localStorage.removeItem('token');\n        localStorage.removeItem('refreshToken');\n        return Promise.reject(refreshError);\n      }\n    }\n\n    return Promise.reject(error);\n  }\n);\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}