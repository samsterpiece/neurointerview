{"ast":null,"code":"// src/services/authService.js\nimport api from './api';\nexport const authService = {\n  // Login user\n  async login(credentials) {\n    try {\n      const response = await api.post('/api/token/', credentials);\n\n      // Set token in API headers\n      api.defaults.headers.common['Authorization'] = `Bearer ${response.data.access}`;\n\n      // Get user data\n      const userResponse = await api.get('/api/users/me/');\n      return {\n        token: response.data.access,\n        refresh_token: response.data.refresh,\n        user: userResponse.data\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || 'Login failed');\n    }\n  },\n  // Register user\n  async register(userData) {\n    try {\n      // Create user\n      const registerResponse = await api.post('/api/users/', userData);\n\n      // Log in the new user\n      const loginData = {\n        username: userData.username,\n        password: userData.password\n      };\n      return await this.login(loginData);\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.detail) || 'Registration failed');\n    }\n  },\n  // Get current user\n  async getCurrentUser() {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token');\n      }\n\n      // Set token in API headers\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n      // Get user data\n      const response = await api.get('/api/users/me/');\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.detail) || 'Failed to get user data');\n    }\n  },\n  // Update user profile\n  async updateProfile(profileData) {\n    try {\n      const response = await api.patch('/api/users/me/', profileData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.detail) || 'Profile update failed');\n    }\n  },\n  // Update user preferences\n  async updatePreferences(preferences) {\n    try {\n      const response = await api.patch('/api/users/update_preferences/', preferences);\n      return response.data;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.detail) || 'Preferences update failed');\n    }\n  }\n};","map":{"version":3,"names":["api","authService","login","credentials","response","post","defaults","headers","common","data","access","userResponse","get","token","refresh_token","refresh","user","error","_error$response","_error$response$data","Error","detail","register","userData","registerResponse","loginData","username","password","_error$response2","_error$response2$data","getCurrentUser","localStorage","getItem","_error$response3","_error$response3$data","updateProfile","profileData","patch","_error$response4","_error$response4$data","updatePreferences","preferences","_error$response5","_error$response5$data"],"sources":["/Users/samanthabadeau/Desktop/neurointerview/frontend/src/services/authService.js"],"sourcesContent":["// src/services/authService.js\nimport api from './api';\n\nexport const authService = {\n  // Login user\n  async login(credentials) {\n    try {\n      const response = await api.post('/api/token/', credentials);\n\n      // Set token in API headers\n      api.defaults.headers.common['Authorization'] = `Bearer ${response.data.access}`;\n\n      // Get user data\n      const userResponse = await api.get('/api/users/me/');\n\n      return {\n        token: response.data.access,\n        refresh_token: response.data.refresh,\n        user: userResponse.data,\n      };\n    } catch (error) {\n      throw new Error(error.response?.data?.detail || 'Login failed');\n    }\n  },\n\n  // Register user\n  async register(userData) {\n    try {\n      // Create user\n      const registerResponse = await api.post('/api/users/', userData);\n\n      // Log in the new user\n      const loginData = {\n        username: userData.username,\n        password: userData.password,\n      };\n\n      return await this.login(loginData);\n    } catch (error) {\n      throw new Error(error.response?.data?.detail || 'Registration failed');\n    }\n  },\n\n  // Get current user\n  async getCurrentUser() {\n    try {\n      const token = localStorage.getItem('token');\n\n      if (!token) {\n        throw new Error('No authentication token');\n      }\n\n      // Set token in API headers\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n      // Get user data\n      const response = await api.get('/api/users/me/');\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.detail || 'Failed to get user data');\n    }\n  },\n\n  // Update user profile\n  async updateProfile(profileData) {\n    try {\n      const response = await api.patch('/api/users/me/', profileData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.detail || 'Profile update failed');\n    }\n  },\n\n  // Update user preferences\n  async updatePreferences(preferences) {\n    try {\n      const response = await api.patch('/api/users/update_preferences/', preferences);\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.detail || 'Preferences update failed');\n    }\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
