# Generated by Django 4.2.8 on 2025-03-02 23:17

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Assessment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                ("time_limit", models.IntegerField(help_text="Time limit in minutes")),
                ("allows_extra_time", models.BooleanField(default=True)),
                ("allows_breaks", models.BooleanField(default=True)),
                ("allows_custom_environment", models.BooleanField(default=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("evaluated", "Evaluated"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Assessment",
                "verbose_name_plural": "Assessments",
            },
        ),
        migrations.CreateModel(
            name="CandidateAssessment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("invited", "Invited"),
                            ("started", "Started"),
                            ("completed", "Completed"),
                            ("expired", "Expired"),
                        ],
                        default="invited",
                        max_length=20,
                    ),
                ),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "time_extended",
                    models.IntegerField(
                        default=0, help_text="Additional time in minutes"
                    ),
                ),
                (
                    "breaks_taken",
                    models.JSONField(
                        default=list, help_text="List of break timestamps"
                    ),
                ),
                ("score", models.FloatField(blank=True, null=True)),
                ("feedback", models.TextField(blank=True)),
                ("used_accommodations", models.JSONField(blank=True, default=dict)),
                (
                    "assessment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.assessment"
                    ),
                ),
            ],
            options={
                "verbose_name": "CandidateAssessment",
                "verbose_name_plural": "CandidateAssessments",
            },
        ),
        migrations.CreateModel(
            name="Company",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "logo",
                    models.ImageField(
                        blank=True, null=True, upload_to="company_logos/"
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("website", models.URLField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Company",
                "verbose_name_plural": "Companies",
            },
        ),
        migrations.CreateModel(
            name="Problem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField()),
                (
                    "problem_type",
                    models.CharField(
                        choices=[
                            ("coding", "Coding Problem"),
                            ("system_design", "System Design"),
                            ("debugging", "Debugging"),
                            ("refactoring", "Refactoring"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "difficulty",
                    models.CharField(
                        choices=[
                            ("easy", "Easy"),
                            ("medium", "Medium"),
                            ("hard", "Hard"),
                        ],
                        max_length=10,
                    ),
                ),
                ("default_time_allowed", models.IntegerField(default=60)),
                ("solution", models.TextField(blank=True)),
                ("test_cases", models.JSONField(default=list)),
                ("hidden_test_cases", models.JSONField(default=list)),
                ("is_public", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "company",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="company_problems",
                        to="api.company",
                    ),
                ),
            ],
            options={
                "verbose_name": "Problem",
                "verbose_name_plural": "Problems",
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=255)),
                (
                    "user_type",
                    models.CharField(
                        choices=[
                            ("candidate", "Candidate"),
                            ("company", "Company"),
                            ("admin", "Admin"),
                        ],
                        default="candidate",
                        max_length=20,
                    ),
                ),
                (
                    "profile_picture",
                    models.ImageField(
                        blank=True, null=True, upload_to="profile_pictures/"
                    ),
                ),
                ("is_adhd", models.BooleanField(default=False)),
                ("is_asd", models.BooleanField(default=False)),
                ("is_dyslexia", models.BooleanField(default=False)),
                ("is_social_anxiety", models.BooleanField(default=False)),
                ("prefers_segmented_sessions", models.BooleanField(default=False)),
                ("prefers_extra_time", models.BooleanField(default=False)),
                ("prefers_text_communication", models.BooleanField(default=False)),
                ("prefers_visual_aids", models.BooleanField(default=False)),
                ("prefers_literal_language", models.BooleanField(default=False)),
                ("prefers_dyslexia_formatting", models.BooleanField(default=False)),
                ("custom_preferences", models.JSONField(blank=True, null=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to.",
                        related_name="api_user_groups",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="api_user_permissions",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Submission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("code", models.TextField()),
                ("language", models.CharField(max_length=50)),
                ("is_correct", models.BooleanField(null=True)),
                ("passed_test_cases", models.IntegerField(default=0)),
                ("total_test_cases", models.IntegerField(default=0)),
                ("execution_time", models.FloatField(blank=True, null=True)),
                ("memory_used", models.FloatField(blank=True, null=True)),
                ("evaluator_comments", models.TextField(blank=True)),
                ("score", models.FloatField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "candidate_assessment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submissions",
                        to="api.candidateassessment",
                    ),
                ),
                (
                    "problem",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.problem"
                    ),
                ),
            ],
            options={
                "verbose_name": "Submission",
                "verbose_name_plural": "Submissions",
            },
        ),
        migrations.CreateModel(
            name="CompanyJobPosition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField()),
                ("skills_required", models.JSONField(default=list)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="job_positions",
                        to="api.company",
                    ),
                ),
            ],
            options={
                "verbose_name": "Company Job Position ",
                "verbose_name_plural": "Company Job Positions",
            },
        ),
        migrations.AddField(
            model_name="company",
            name="admins",
            field=models.ManyToManyField(
                related_name="administered_companies", to="api.user"
            ),
        ),
        migrations.AddField(
            model_name="assessment",
            name="company",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="company_assessments",
                to="api.company",
            ),
        ),
        migrations.AddField(
            model_name="assessment",
            name="job_position",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="position_assessments",
                to="api.companyjobposition",
            ),
        ),
        migrations.AddField(
            model_name="assessment",
            name="problems",
            field=models.ManyToManyField(related_name="assessments", to="api.problem"),
        ),
    ]
